-- ============================================================
-- REP_AGG_001 Schema - Reporting & Analytics
-- Updated on: 2025-09-29 (Updated to use CRM_AGG_001 aggregation layer)
-- ============================================================
--
-- This schema contains dynamic tables for reporting and analytics
-- for the synthetic EMEA retail bank data generator.
--
-- DATA LAYER ARCHITECTURE:
-- - Uses CRM_AGG_001 aggregation layer (not raw CRM_RAW_001)
-- - Uses PAY_AGG_001 aggregation layer (not raw PAY_RAW_001)
-- - Leverages pre-computed customer, account, and payment aggregations
-- - Proper data architecture: RAW → AGG → REPORTING
--
-- Objects created:
-- - Dynamic Tables: Customer, Transaction, and Equity Analytics
-- - Refresh Schedule: 1 hour (15 minutes for high-value trades)
-- - Warehouse: MD_TEST_WH
-- ============================================================

USE DATABASE AAA_DEV_SYNTHETIC_BANK;
USE SCHEMA REP_AGG_001;

-- ============================================================
-- REPORTING DYNAMIC TABLES
-- ============================================================
-- Pre-built dynamic tables for common CDD analysis patterns
-- Refreshed automatically every 1 hour with TARGET_LAG = '1 hour'

-- Customer summary with transaction statistics
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_CUSTOMER_SUMMARY
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    c.CUSTOMER_ID,
    CONCAT(c.FIRST_NAME, ' ', c.FAMILY_NAME) AS FULL_NAME,
    c.HAS_ANOMALY,
    c.ONBOARDING_DATE,
    COUNT(a.ACCOUNT_ID) AS TOTAL_ACCOUNTS,
    COUNT(DISTINCT a.BASE_CURRENCY) AS CURRENCY_COUNT,
    LISTAGG(DISTINCT a.BASE_CURRENCY, ', ') AS ACCOUNT_CURRENCIES,
    COUNT(t.TRANSACTION_ID) AS TOTAL_TRANSACTIONS,
    SUM(t.AMOUNT) AS TOTAL_BASE_AMOUNT,
    AVG(t.AMOUNT) AS AVG_TRANSACTION_AMOUNT,
    MAX(t.AMOUNT) AS MAX_TRANSACTION_AMOUNT,
    COUNT(CASE WHEN t.DESCRIPTION LIKE '%[%]%' THEN 1 END) AS ANOMALOUS_TRANSACTIONS
FROM AAA_DEV_SYNTHETIC_BANK.CRM_AGG_001.CRMA_AGG_DT_CUSTOMER c
LEFT JOIN AAA_DEV_SYNTHETIC_BANK.CRM_AGG_001.ACCA_AGG_DT_ACCOUNTS a ON c.CUSTOMER_ID = a.CUSTOMER_ID
LEFT JOIN AAA_DEV_SYNTHETIC_BANK.PAY_AGG_001.PAYA_AGG_DT_TRANSACTION_ANOMALIES t ON c.CUSTOMER_ID = t.CUSTOMER_ID
GROUP BY c.CUSTOMER_ID, c.FIRST_NAME, c.FAMILY_NAME, c.HAS_ANOMALY, c.ONBOARDING_DATE;

-- Daily transaction summary
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_DAILY_TRANSACTION_SUMMARY
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    DATE(BOOKING_DATE) AS TRANSACTION_DATE,
    COUNT(*) AS TRANSACTION_COUNT,
    COUNT(DISTINCT CUSTOMER_ID) AS UNIQUE_CUSTOMERS,
    SUM(AMOUNT) AS TOTAL_BASE_AMOUNT,
    AVG(AMOUNT) AS AVG_BASE_AMOUNT,
    COUNT(CASE WHEN AMOUNT > 0 THEN 1 END) AS INCOMING_COUNT,
    COUNT(CASE WHEN AMOUNT < 0 THEN 1 END) AS OUTGOING_COUNT,
    COUNT(CASE WHEN DESCRIPTION LIKE '%[%]%' THEN 1 END) AS ANOMALOUS_COUNT,
    COUNT(DISTINCT CURRENCY) AS CURRENCY_COUNT
FROM AAA_DEV_SYNTHETIC_BANK.PAY_AGG_001.PAYA_AGG_DT_TRANSACTION_ANOMALIES
GROUP BY DATE(BOOKING_DATE)
ORDER BY TRANSACTION_DATE;

-- Currency exposure summary (non-CHF currencies)
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_CURRENCY_EXPOSURE_CURRENT
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    CURRENCY,
    COUNT(*) AS TRANSACTION_COUNT,
    SUM(AMOUNT) AS TOTAL_ORIGINAL_AMOUNT,
    SUM(AMOUNT) AS TOTAL_CHF_AMOUNT,  -- Note: AMOUNT is in original currency, not necessarily CHF
    1.0 AS AVG_FX_RATE,  -- FX_RATE not available in anomaly table, using placeholder
    1.0 AS MIN_FX_RATE,  -- FX_RATE not available in anomaly table, using placeholder  
    1.0 AS MAX_FX_RATE,  -- FX_RATE not available in anomaly table, using placeholder
    COUNT(DISTINCT CUSTOMER_ID) AS UNIQUE_CUSTOMERS
FROM AAA_DEV_SYNTHETIC_BANK.PAY_AGG_001.PAYA_AGG_DT_TRANSACTION_ANOMALIES
WHERE CURRENCY != 'CHF'
GROUP BY CURRENCY
ORDER BY TOTAL_CHF_AMOUNT DESC;

-- Currency exposure over time (daily trends)
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_CURRENCY_EXPOSURE_HISTORY
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    DATE(BOOKING_DATE) AS EXPOSURE_DATE,
    CURRENCY,
    COUNT(*) AS DAILY_TRANSACTION_COUNT,
    SUM(AMOUNT) AS DAILY_TOTAL_AMOUNT,
    AVG(AMOUNT) AS DAILY_AVG_AMOUNT,
    MIN(AMOUNT) AS DAILY_MIN_AMOUNT,
    MAX(AMOUNT) AS DAILY_MAX_AMOUNT,
    COUNT(DISTINCT CUSTOMER_ID) AS DAILY_UNIQUE_CUSTOMERS,
    
    -- Rolling 7-day trends
    SUM(COUNT(*)) OVER (
        PARTITION BY CURRENCY 
        ORDER BY DATE(BOOKING_DATE) 
        ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
    ) AS ROLLING_7D_TRANSACTION_COUNT,
    
    SUM(SUM(AMOUNT)) OVER (
        PARTITION BY CURRENCY 
        ORDER BY DATE(BOOKING_DATE) 
        ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
    ) AS ROLLING_7D_TOTAL_AMOUNT,
    
    AVG(SUM(AMOUNT)) OVER (
        PARTITION BY CURRENCY 
        ORDER BY DATE(BOOKING_DATE) 
        ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
    ) AS ROLLING_7D_AVG_DAILY_AMOUNT,
    
    -- Month-over-month comparison
    LAG(SUM(AMOUNT), 30) OVER (
        PARTITION BY CURRENCY 
        ORDER BY DATE(BOOKING_DATE)
    ) AS AMOUNT_30_DAYS_AGO,
    
    -- Growth calculations
    CASE 
        WHEN LAG(SUM(AMOUNT), 30) OVER (PARTITION BY CURRENCY ORDER BY DATE(BOOKING_DATE)) > 0 
        THEN ROUND(
            ((SUM(AMOUNT) - LAG(SUM(AMOUNT), 30) OVER (PARTITION BY CURRENCY ORDER BY DATE(BOOKING_DATE))) / 
             LAG(SUM(AMOUNT), 30) OVER (PARTITION BY CURRENCY ORDER BY DATE(BOOKING_DATE))) * 100, 2
        )
        ELSE NULL
    END AS GROWTH_RATE_30D_PERCENT,
    
    -- Risk indicators
    CASE 
        WHEN COUNT(*) > 100 THEN 'HIGH_VOLUME'
        WHEN COUNT(*) > 50 THEN 'MEDIUM_VOLUME'
        ELSE 'LOW_VOLUME'
    END AS DAILY_VOLUME_CATEGORY,
    
    CASE 
        WHEN SUM(AMOUNT) > 1000000 THEN 'HIGH_EXPOSURE'
        WHEN SUM(AMOUNT) > 100000 THEN 'MEDIUM_EXPOSURE'
        ELSE 'LOW_EXPOSURE'
    END AS DAILY_EXPOSURE_CATEGORY
    
FROM AAA_DEV_SYNTHETIC_BANK.PAY_AGG_001.PAYA_AGG_DT_TRANSACTION_ANOMALIES
WHERE CURRENCY != 'CHF'
GROUP BY DATE(BOOKING_DATE), CURRENCY
ORDER BY EXPOSURE_DATE DESC, DAILY_TOTAL_AMOUNT DESC;

-- Settlement timing exposure analysis
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_CURRENCY_SETTLEMENT_EXPOSURE
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    DATE(VALUE_DATE) AS SETTLEMENT_DATE,
    CURRENCY,
    COUNT(*) AS SETTLEMENT_TRANSACTION_COUNT,
    SUM(AMOUNT) AS SETTLEMENT_TOTAL_AMOUNT,
    AVG(DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE)) AS AVG_SETTLEMENT_DAYS,
    
    -- Settlement risk analysis
    COUNT(CASE WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) = 0 THEN 1 END) AS SAME_DAY_SETTLEMENTS,
    COUNT(CASE WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) = 1 THEN 1 END) AS T_PLUS_1_SETTLEMENTS,
    COUNT(CASE WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) BETWEEN 2 AND 3 THEN 1 END) AS T_PLUS_2_3_SETTLEMENTS,
    COUNT(CASE WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) > 5 THEN 1 END) AS DELAYED_SETTLEMENTS,
    COUNT(CASE WHEN VALUE_DATE < DATE(BOOKING_DATE) THEN 1 END) AS BACKDATED_SETTLEMENTS,
    
    -- Liquidity risk indicators
    CASE 
        WHEN COUNT(CASE WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) > 5 THEN 1 END) > 0 
        THEN 'HIGH_SETTLEMENT_RISK'
        WHEN COUNT(CASE WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) > 3 THEN 1 END) > 
             COUNT(*) * 0.1 
        THEN 'MEDIUM_SETTLEMENT_RISK'
        ELSE 'LOW_SETTLEMENT_RISK'
    END AS SETTLEMENT_RISK_LEVEL,
    
    -- Weekend/holiday settlement patterns
    CASE 
        WHEN DAYOFWEEK(DATE(VALUE_DATE)) IN (1,7) THEN 'WEEKEND_SETTLEMENT'
        ELSE 'WEEKDAY_SETTLEMENT'
    END AS SETTLEMENT_TIMING_TYPE
    
FROM AAA_DEV_SYNTHETIC_BANK.PAY_AGG_001.PAYA_AGG_DT_TRANSACTION_ANOMALIES
WHERE CURRENCY != 'CHF'
GROUP BY DATE(VALUE_DATE), CURRENCY
ORDER BY SETTLEMENT_DATE DESC, SETTLEMENT_TOTAL_AMOUNT DESC;

-- Anomaly detection summary
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_ANOMALY_ANALYSIS
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    c.CUSTOMER_ID,
    CONCAT(c.FIRST_NAME, ' ', c.FAMILY_NAME) AS FULL_NAME,
    c.HAS_ANOMALY AS IS_ANOMALOUS_CUSTOMER,
    COUNT(t.TRANSACTION_ID) AS TOTAL_TRANSACTIONS,
    COUNT(CASE WHEN t.DESCRIPTION LIKE '%[%]%' THEN 1 END) AS ANOMALOUS_TRANSACTIONS,
    ROUND(COUNT(CASE WHEN t.DESCRIPTION LIKE '%[%]%' THEN 1 END) * 100.0 / COUNT(t.TRANSACTION_ID), 2) AS ANOMALY_PERCENTAGE,
    SUM(CASE WHEN t.DESCRIPTION LIKE '%[%]%' THEN t.AMOUNT ELSE 0 END) AS ANOMALOUS_AMOUNT,
    LISTAGG(DISTINCT
        CASE WHEN t.DESCRIPTION LIKE '%[%]%'
        THEN REGEXP_REPLACE(t.DESCRIPTION, '.*\[(.*?)\].*', '\\1')
        END, ', ') AS ANOMALY_TYPES
FROM AAA_DEV_SYNTHETIC_BANK.CRM_AGG_001.CRMA_AGG_DT_CUSTOMER c
LEFT JOIN AAA_DEV_SYNTHETIC_BANK.PAY_AGG_001.PAYA_AGG_DT_TRANSACTION_ANOMALIES t ON c.CUSTOMER_ID = t.CUSTOMER_ID
GROUP BY c.CUSTOMER_ID, c.FIRST_NAME, c.FAMILY_NAME, c.HAS_ANOMALY
HAVING COUNT(t.TRANSACTION_ID) > 0
ORDER BY ANOMALY_PERCENTAGE DESC, ANOMALOUS_AMOUNT DESC;

-- High-risk transaction patterns
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_HIGH_RISK_PATTERNS
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    TRANSACTION_ID,
    CUSTOMER_ID,
    BOOKING_DATE,
    VALUE_DATE,
    AMOUNT,
    CURRENCY,
    CASE WHEN AMOUNT > 0 THEN 'IN' ELSE 'OUT' END AS DIRECTION,
    DESCRIPTION,
    CASE
        WHEN AMOUNT >= 10000 THEN 'HIGH_AMOUNT'
        WHEN DESCRIPTION LIKE '%[%]%' THEN 'ANOMALOUS'
        WHEN CURRENCY != 'CHF' AND AMOUNT >= 5000 THEN 'HIGH_FX_AMOUNT'
        WHEN COUNTERPARTY_ACCOUNT LIKE 'OFF_SHORE_%' THEN 'OFFSHORE'
        WHEN COUNTERPARTY_ACCOUNT LIKE 'CRYPTO_%' THEN 'CRYPTO'
        WHEN HOUR(BOOKING_DATE) NOT BETWEEN 9 AND 17 THEN 'OFF_HOURS'
        WHEN VALUE_DATE < DATE(BOOKING_DATE) THEN 'BACKDATED_SETTLEMENT'
        WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) > 5 THEN 'DELAYED_SETTLEMENT'
        ELSE 'OTHER'
    END AS RISK_CATEGORY,
    
    -- Settlement Analysis
    DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) AS SETTLEMENT_DAYS
FROM AAA_DEV_SYNTHETIC_BANK.PAY_AGG_001.PAYA_AGG_DT_TRANSACTION_ANOMALIES
WHERE
    AMOUNT >= 10000
    OR DESCRIPTION LIKE '%[%]%'
    OR (CURRENCY != 'CHF' AND AMOUNT >= 5000)
    OR COUNTERPARTY_ACCOUNT LIKE 'OFF_SHORE_%'
    OR COUNTERPARTY_ACCOUNT LIKE 'CRYPTO_%'
    OR HOUR(BOOKING_DATE) NOT BETWEEN 9 AND 17
    OR VALUE_DATE < DATE(BOOKING_DATE)  -- Backdated settlements
    OR DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) > 5  -- Delayed settlements
ORDER BY AMOUNT DESC, BOOKING_DATE DESC;

-- Settlement risk analysis
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_SETTLEMENT_ANALYSIS
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    DATE(BOOKING_DATE) AS BOOKING_DATE,
    DATE(VALUE_DATE) AS VALUE_DATE,
    DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) AS SETTLEMENT_DAYS,
    COUNT(*) AS TRANSACTION_COUNT,
    COUNT(DISTINCT CUSTOMER_ID) AS UNIQUE_CUSTOMERS,
    SUM(AMOUNT) AS TOTAL_AMOUNT,
    AVG(AMOUNT) AS AVG_AMOUNT,
    COUNT(CASE WHEN VALUE_DATE < DATE(BOOKING_DATE) THEN 1 END) AS BACKDATED_COUNT,
    COUNT(CASE WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) > 5 THEN 1 END) AS DELAYED_COUNT,
    COUNT(CASE WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) = 0 THEN 1 END) AS SAME_DAY_COUNT,
    COUNT(CASE WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) = 1 THEN 1 END) AS NEXT_DAY_COUNT,
    COUNT(CASE WHEN DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE) BETWEEN 2 AND 3 THEN 1 END) AS T_PLUS_2_3_COUNT
FROM AAA_DEV_SYNTHETIC_BANK.PAY_AGG_001.PAYA_AGG_DT_TRANSACTION_ANOMALIES
GROUP BY DATE(BOOKING_DATE), DATE(VALUE_DATE), DATEDIFF(DAY, BOOKING_DATE, VALUE_DATE)
ORDER BY BOOKING_DATE DESC, SETTLEMENT_DAYS DESC;

-- ============================================================
-- EQUITY TRADING DYNAMIC TABLES
-- ============================================================

-- Equity trading summary by customer
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_EQUITY_SUMMARY
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    t.CUSTOMER_ID,
    t.ACCOUNT_ID,
    a.BASE_CURRENCY,
    COUNT(*) AS TOTAL_TRADES,
    SUM(CASE WHEN t.SIDE = '1' THEN 1 ELSE 0 END) AS BUY_TRADES,
    SUM(CASE WHEN t.SIDE = '2' THEN 1 ELSE 0 END) AS SELL_TRADES,
    COUNT(DISTINCT t.SYMBOL) AS UNIQUE_SYMBOLS,
    SUM(ABS(t.BASE_GROSS_AMOUNT)) AS TOTAL_CHF_VOLUME,
    SUM(t.BASE_GROSS_AMOUNT) AS NET_CHF_POSITION, -- Positive = net buyer, negative = net seller
    SUM(t.COMMISSION) AS TOTAL_COMMISSION_CHF,
    AVG(ABS(t.BASE_GROSS_AMOUNT)) AS AVG_TRADE_SIZE_CHF,
    MIN(t.TRADE_DATE) AS FIRST_TRADE_DATE,
    MAX(t.TRADE_DATE) AS LAST_TRADE_DATE
FROM AAA_DEV_SYNTHETIC_BANK.EQT_RAW_001.EQTI_TRADES t
LEFT JOIN AAA_DEV_SYNTHETIC_BANK.CRM_AGG_001.ACCA_AGG_DT_ACCOUNTS a ON t.ACCOUNT_ID = a.ACCOUNT_ID
GROUP BY t.CUSTOMER_ID, t.ACCOUNT_ID, a.BASE_CURRENCY;

-- Equity position summary by symbol
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_EQUITY_POSITIONS
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    SYMBOL,
    ISIN,
    COUNT(DISTINCT CUSTOMER_ID) AS UNIQUE_CUSTOMERS,
    SUM(CASE WHEN SIDE = '1' THEN QUANTITY ELSE -QUANTITY END) AS NET_POSITION, -- Positive = long, negative = short
    SUM(CASE WHEN SIDE = '1' THEN QUANTITY ELSE 0 END) AS TOTAL_BOUGHT,
    SUM(CASE WHEN SIDE = '2' THEN QUANTITY ELSE 0 END) AS TOTAL_SOLD,
    COUNT(*) AS TOTAL_TRADES,
    SUM(ABS(BASE_GROSS_AMOUNT)) AS TOTAL_CHF_VOLUME,
    AVG(PRICE) AS AVG_PRICE,
    MIN(PRICE) AS MIN_PRICE,
    MAX(PRICE) AS MAX_PRICE,
    MAX(TRADE_DATE) AS LAST_TRADE_DATE
FROM AAA_DEV_SYNTHETIC_BANK.EQT_RAW_001.EQTI_TRADES
GROUP BY SYMBOL, ISIN;

-- Equity currency exposure (similar to FX exposure for trades)
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_EQUITY_CURRENCY_EXPOSURE
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    CURRENCY,
    COUNT(*) AS TRADE_COUNT,
    SUM(ABS(GROSS_AMOUNT)) AS TOTAL_ORIGINAL_VOLUME,
    SUM(ABS(BASE_GROSS_AMOUNT)) AS TOTAL_CHF_VOLUME,
    AVG(FX_RATE) AS AVG_FX_RATE,
    MIN(FX_RATE) AS MIN_FX_RATE,
    MAX(FX_RATE) AS MAX_FX_RATE,
    COUNT(DISTINCT CUSTOMER_ID) AS UNIQUE_CUSTOMERS,
    COUNT(DISTINCT SYMBOL) AS UNIQUE_SYMBOLS
FROM AAA_DEV_SYNTHETIC_BANK.EQT_RAW_001.EQTI_TRADES
WHERE CURRENCY != 'CHF'
GROUP BY CURRENCY;

-- High-value equity trades (potential compliance monitoring)
CREATE OR REPLACE DYNAMIC TABLE REPP_DT_HIGH_VALUE_EQUITY_TRADES
TARGET_LAG = '1 hour'
WAREHOUSE = MD_TEST_WH
AS
SELECT
    TRADE_DATE,
    CUSTOMER_ID,
    ACCOUNT_ID,
    TRADE_ID,
    SYMBOL,
    SIDE,
    QUANTITY,
    PRICE,
    ABS(BASE_GROSS_AMOUNT) AS CHF_VALUE,
    MARKET,
    VENUE
FROM AAA_DEV_SYNTHETIC_BANK.EQT_RAW_001.EQTI_TRADES
WHERE ABS(BASE_GROSS_AMOUNT) > 100000 -- Trades over 100k CHF
ORDER BY ABS(BASE_GROSS_AMOUNT) DESC;

-- ============================================================
-- USAGE EXAMPLES
-- ============================================================
-- You can now query your data using standard SQL or the dynamic tables above.
-- Dynamic tables are automatically refreshed every 1 hour.
--
-- Examples:
--
-- SELECT * FROM REPP_DT_CUSTOMER_SUMMARY WHERE HAS_ANOMALY = TRUE;
-- SELECT * FROM REPP_DT_HIGH_RISK_PATTERNS LIMIT 100;
-- SELECT * FROM REPP_DT_CURRENCY_EXPOSURE;
-- SELECT * FROM REPP_DT_EQUITY_SUMMARY LIMIT 10;
-- SELECT * FROM REPP_DT_EQUITY_POSITIONS WHERE NET_POSITION != 0 LIMIT 10;
-- SELECT * FROM REPP_DT_EQUITY_CURRENCY_EXPOSURE;
-- SELECT * FROM REPP_DT_HIGH_VALUE_EQUITY_TRADES LIMIT 20;
--
-- To check dynamic table refresh status:
-- SHOW DYNAMIC TABLES IN SCHEMA AAA_DEV_SYNTHETIC_BANK.REPP_AGG_001;
--
-- To manually refresh a dynamic table:
-- ALTER DYNAMIC TABLE REPP_DT_CUSTOMER_SUMMARY REFRESH;
--
-- ============================================================
-- REPP_AGG_001 Schema setup completed!
-- ============================================================
