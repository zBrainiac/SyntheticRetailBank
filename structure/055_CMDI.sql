-- ============================================================
-- CMD_RAW_001 Schema - Commodity Raw Data Ingestion
-- Generated on: 2025-10-05
-- ============================================================
--
-- OVERVIEW:
-- This schema stores raw commodity trade data including energy, precious metals,
-- base metals, and agricultural commodities. Data is loaded from CSV files
-- generated by commodity_generator.py.
--
-- BUSINESS PURPOSE:
-- - Store all commodity trades for market risk management
-- - Support FRTB (Fundamental Review of the Trading Book) capital calculations
-- - Enable delta risk analytics for price sensitivity
-- - Track physical delivery obligations and logistics
-- - Maintain audit trail for regulatory compliance
--
-- OBJECTS CREATED:
-- ┌─ STAGES (1):
-- │  └─ CMDI_TRADES      - Commodity trade files
-- │
-- ├─ FILE FORMATS (1):
-- │  └─ CMDI_FF_TRADES_CSV - Commodity trade CSV format
-- │
-- ├─ TABLES (1):
-- │  └─ CMDI_TRADES - Main table for all commodity trades
-- │
-- ├─ STREAMS (1):
-- │  └─ CMDI_TRADES_STREAM - Change data capture for incremental processing
-- │
-- └─ TASKS (1):
--    └─ CMDI_LOAD_TRADES_TASK - Serverless task for automated CSV loading
--
-- DATA FLOW:
-- CSV Files → CMDI_TRADES → CMDI_TRADES → CMDI_TRADES_STREAM → CMD_AGG_001
--
-- RELATED SCHEMAS:
-- - CMD_AGG_001: Aggregation layer for delta risk and volatility analytics
-- - CRM_RAW_001: Customer and account master data
-- - REF_RAW_001: FX rates for currency conversion
-- ============================================================

USE DATABASE AAA_DEV_SYNTHETIC_BANK;
USE SCHEMA CMD_RAW_001;


-- ============================================================
-- INTERNAL STAGES - File Landing Areas
-- ============================================================
-- Internal stages for CSV file ingestion with directory listing enabled
-- for automated file detection via streams. All stages support PUT/GET
-- operations for manual file uploads and downloads.

-- Commodity trade data stage
CREATE OR REPLACE STAGE CMDI_TRADES
    DIRECTORY = (
        ENABLE = TRUE
        AUTO_REFRESH = TRUE
    )
    COMMENT = 'Internal stage for commodity trade CSV files. Expected pattern: *commodity_trades*.csv with fields: trade_date, trade_id, customer_id, account_id, commodity_type, quantity, price, etc.';

-- ============================================================
-- FILE FORMATS - CSV Parsing Configurations
-- ============================================================
-- Standardized CSV file formats for consistent data ingestion across
-- all commodity trade data sources. All formats handle quoted fields,
-- trim whitespace, and use flexible column count matching.

-- Commodity trade CSV format
CREATE OR REPLACE FILE FORMAT CMDI_FF_TRADES_CSV
    TYPE = 'CSV'
    FIELD_DELIMITER = ','
    RECORD_DELIMITER = '\n'
    SKIP_HEADER = 1
    FIELD_OPTIONALLY_ENCLOSED_BY = '"'
    TRIM_SPACE = TRUE
    ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE
    REPLACE_INVALID_CHARACTERS = TRUE
    DATE_FORMAT = 'YYYY-MM-DD'
    TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS'
    COMMENT = 'CSV format for commodity trade data with FRTB risk metrics and currency conversion support';

-- ============================================================
-- MASTER DATA TABLES - Commodity Trade Information
-- ============================================================

-- ============================================================
-- CMDI_TRADES - Main Commodity Trades Table
-- ============================================================
-- Stores all commodity trades across energy, metals, and agricultural sectors

CREATE OR REPLACE TABLE CMDI_TRADES (
    -- Trade Identification
    TRADE_DATE TIMESTAMP_NTZ COMMENT 'Trade execution timestamp',
    SETTLEMENT_DATE DATE COMMENT 'Settlement/delivery date',
    TRADE_ID VARCHAR(50) PRIMARY KEY COMMENT 'Unique trade identifier',
    CUSTOMER_ID VARCHAR(30) COMMENT 'Customer who executed the trade',
    ACCOUNT_ID VARCHAR(30) COMMENT 'Investment account used for settlement',
    ORDER_ID VARCHAR(50) COMMENT 'Order reference for trade grouping',
    
    -- Commodity Details
    COMMODITY_TYPE VARCHAR(20) COMMENT 'ENERGY, PRECIOUS_METAL, BASE_METAL, AGRICULTURAL',
    COMMODITY_NAME VARCHAR(50) COMMENT 'Crude Oil WTI, Gold, Copper, Wheat, etc.',
    COMMODITY_CODE VARCHAR(10) COMMENT 'WTI, XAU, HG, ZW, etc.',
    CONTRACT_TYPE VARCHAR(10) COMMENT 'SPOT, FUTURE, FORWARD, SWAP',
    
    -- Trade Details
    SIDE VARCHAR(1) COMMENT '1=Buy, 2=Sell (FIX standard)',
    QUANTITY FLOAT WITH TAG (SENSITIVITY_LEVEL='restricted') COMMENT 'Quantity in commodity units',
    UNIT VARCHAR(20) COMMENT 'Barrel, Troy Ounce, Metric Ton, Bushel, etc.',
    PRICE FLOAT COMMENT 'Price per unit in trade currency',
    CURRENCY VARCHAR(3) COMMENT 'Trading currency (USD, EUR, GBP, CHF)',
    
    -- Financial Details
    GROSS_AMOUNT FLOAT WITH TAG (SENSITIVITY_LEVEL='restricted') COMMENT 'Signed gross amount: quantity * price',
    COMMISSION FLOAT WITH TAG (SENSITIVITY_LEVEL='restricted') COMMENT 'Trading commission',
    NET_AMOUNT FLOAT WITH TAG (SENSITIVITY_LEVEL='restricted') COMMENT 'Signed net amount: gross_amount +/- commission',
    
    -- Base Currency (CHF)
    BASE_CURRENCY VARCHAR(3) COMMENT 'Base reporting currency (CHF)',
    BASE_GROSS_AMOUNT FLOAT WITH TAG (SENSITIVITY_LEVEL='restricted') COMMENT 'Gross amount in CHF',
    BASE_NET_AMOUNT FLOAT COMMENT 'Net amount in CHF',
    FX_RATE FLOAT COMMENT 'Exchange rate used for conversion to CHF',
    
    -- Contract Details
    CONTRACT_SIZE FLOAT COMMENT 'Standard contract size',
    NUM_CONTRACTS FLOAT COMMENT 'Number of contracts',
    DELIVERY_MONTH VARCHAR(7) COMMENT 'Delivery month (YYYY-MM format)',
    DELIVERY_LOCATION VARCHAR(100) COMMENT 'Physical delivery location/hub',
    
    -- Risk Metrics (FRTB)
    DELTA FLOAT COMMENT 'Price sensitivity (change in value for $1 move in commodity)',
    VEGA FLOAT COMMENT 'Volatility sensitivity (for options, if applicable)',
    SPOT_PRICE FLOAT COMMENT 'Current spot price',
    FORWARD_PRICE FLOAT COMMENT 'Forward/futures price',
    VOLATILITY FLOAT COMMENT 'Price volatility (%)',
    LIQUIDITY_SCORE FLOAT COMMENT '1-10 scale for NMRF classification (1=illiquid, 10=liquid)',
    
    -- Market Data
    EXCHANGE VARCHAR(20) COMMENT 'Trading exchange (CME, ICE, LME, NYMEX, CBOT)',
    BROKER_ID VARCHAR(50) COMMENT 'Executing broker identifier',
    VENUE VARCHAR(50) COMMENT 'Trading venue',
    
    -- Metadata
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP() COMMENT 'Record creation timestamp'
) COMMENT = 'Raw commodity trades (energy, metals, agricultural) with FRTB risk metrics';

-- ============================================================
-- CHANGE DETECTION STREAMS - File Monitoring
-- ============================================================
-- Streams monitor stages for new files and trigger automated processing
-- tasks. Each stream detects specific file patterns and maintains change
-- tracking for reliable data pipeline processing.

-- Commodity trade file detection stream
CREATE OR REPLACE STREAM CMDI_TRADES_STREAM
    ON STAGE CMDI_TRADES
    COMMENT = 'Monitors CMDI_TRADES stage for new commodity trade CSV files. Triggers CMDI_LOAD_TRADES_TASK when files matching *commodity_trades*.csv pattern are detected';

-- ============================================================
-- AUTOMATED PROCESSING TASKS - Data Pipeline Orchestration
-- ============================================================
-- Automated tasks triggered by stream data availability. All tasks run
-- on 1-hour schedule with stream-based triggering for efficient resource
-- usage. Error handling continues processing despite individual record failures.

-- Commodity trade loading task
CREATE OR REPLACE TASK CMDI_LOAD_TRADES_TASK
    USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = 'XSMALL'
    SCHEDULE = '60 MINUTE'
    WHEN SYSTEM$STREAM_HAS_DATA('CMDI_TRADES_STREAM')
AS
    COPY INTO CMDI_TRADES (
        TRADE_DATE, SETTLEMENT_DATE, TRADE_ID, CUSTOMER_ID, ACCOUNT_ID, ORDER_ID,
        COMMODITY_TYPE, COMMODITY_NAME, COMMODITY_CODE, CONTRACT_TYPE, SIDE, QUANTITY, UNIT, PRICE, CURRENCY,
        GROSS_AMOUNT, COMMISSION, NET_AMOUNT, BASE_CURRENCY, BASE_GROSS_AMOUNT, BASE_NET_AMOUNT, FX_RATE,
        CONTRACT_SIZE, NUM_CONTRACTS, DELIVERY_MONTH, DELIVERY_LOCATION, DELTA, VEGA, SPOT_PRICE, FORWARD_PRICE, VOLATILITY,
        EXCHANGE, BROKER_ID, VENUE, LIQUIDITY_SCORE
    )
    FROM @CMDI_TRADES
    PATTERN = '.*commodity_trades.*\.csv'
    FILE_FORMAT = CMDI_FF_TRADES_CSV
    ON_ERROR = CONTINUE;

-- ============================================================
-- TASK ACTIVATION - Enable Automated Processing
-- ============================================================
-- Tasks must be explicitly resumed to begin processing. This allows for
-- controlled deployment and testing before enabling automated data flows.

-- Enable commodity trade data loading
ALTER TASK CMDI_LOAD_TRADES_TASK RESUME;

-- ============================================================
-- USAGE EXAMPLES
-- ============================================================
--
-- 1. Load CSV file manually:
--    PUT file://path/to/commodity_trades.csv @CMDI_TRADES;
--    COPY INTO CMDI_TRADES FROM @CMDI_TRADES
--    FILE_FORMAT = (TYPE = CSV SKIP_HEADER = 1 FIELD_OPTIONALLY_ENCLOSED_BY = '"');
--
-- 2. Query recent trades:
--    SELECT * FROM CMDI_TRADES 
--    WHERE TRADE_DATE >= CURRENT_DATE - 30
--    ORDER BY TRADE_DATE DESC;
--
-- 3. Check commodity type distribution:
--    SELECT COMMODITY_TYPE, COUNT(*) as trade_count, 
--           SUM(BASE_GROSS_AMOUNT) as total_value_chf
--    FROM CMDI_TRADES
--    GROUP BY COMMODITY_TYPE;
--
-- 4. Find high-risk illiquid positions (NMRF):
--    SELECT COMMODITY_NAME, CUSTOMER_ID, QUANTITY, BASE_GROSS_AMOUNT
--    FROM CMDI_TRADES
--    WHERE LIQUIDITY_SCORE < 5
--    ORDER BY BASE_GROSS_AMOUNT DESC;
--
-- 5. Monitor stream for new data:
--    SELECT * FROM CMDI_TRADES_STREAM;
--
-- 6. Resume automated loading task:
--    ALTER TASK CMDI_LOAD_TRADES_TASK RESUME;
--
-- 7. Check task execution history:
--    SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY())
--    WHERE NAME = 'CMDI_LOAD_TRADES_TASK'
--    ORDER BY SCHEDULED_TIME DESC;
--
-- 8. Analyze delivery schedule:
--    SELECT DELIVERY_MONTH, COMMODITY_TYPE, 
--           SUM(QUANTITY) as total_quantity,
--           COUNT(*) as contract_count
--    FROM CMDI_TRADES
--    WHERE DELIVERY_MONTH IS NOT NULL
--    GROUP BY DELIVERY_MONTH, COMMODITY_TYPE
--    ORDER BY DELIVERY_MONTH;
--
-- 9. Query directory table to see loaded files:
--    SELECT * FROM DIRECTORY(@CMDI_TRADES);
--
-- 10. Check file metadata and load history:
--     SELECT 
--       RELATIVE_PATH,
--       SIZE,
--       LAST_MODIFIED,
--       MD5
--     FROM DIRECTORY(@CMDI_TRADES)
--     ORDER BY LAST_MODIFIED DESC;
--
-- ============================================================
-- SCHEMA COMPLETION STATUS
-- ============================================================
-- ✅ CMD_RAW_001 Schema Deployment Complete
--
-- OBJECTS CREATED:
-- • 1 Stage: CMDI_TRADES
-- • 1 File Format: CMDI_FF_TRADES_CSV
-- • 1 Table: CMDI_TRADES
-- • 1 Stream: CMDI_TRADES_STREAM
-- • 1 Task: CMDI_LOAD_TRADES_TASK (ACTIVE)
--
-- NEXT STEPS:
-- 1. ✅ CMD_RAW_001 schema deployed successfully
-- 2. Upload commodity trade CSV files to CMDI_TRADES stage
-- 3. Monitor task execution: SHOW TASKS IN SCHEMA CMD_RAW_001;
-- 4. Verify data loading: SELECT COUNT(*) FROM CMDI_TRADES;
-- 5. Check for processing errors in task history
-- 6. Deploy CMD_AGG_001 schema for delta risk and volatility analytics
--
-- USAGE EXAMPLES:
-- -- Upload files
-- PUT file://commodity_trades.csv @CMDI_TRADES;
-- 
-- -- Check trade distribution by commodity type
-- SELECT COMMODITY_TYPE, COUNT(*) as trade_count, 
--        SUM(BASE_GROSS_AMOUNT) as total_value_chf
-- FROM CMDI_TRADES
-- GROUP BY COMMODITY_TYPE;
--
-- -- Analyze FRTB risk metrics
-- SELECT COMMODITY_TYPE, AVG(DELTA) as avg_delta, AVG(VOLATILITY) as avg_volatility
-- FROM CMDI_TRADES
-- WHERE DELTA IS NOT NULL
-- GROUP BY COMMODITY_TYPE
-- ORDER BY COMMODITY_TYPE;
--
-- -- Find high-risk illiquid positions (NMRF)
-- SELECT COMMODITY_NAME, CUSTOMER_ID, QUANTITY, BASE_GROSS_AMOUNT
-- FROM CMDI_TRADES
-- WHERE LIQUIDITY_SCORE < 5
-- ORDER BY BASE_GROSS_AMOUNT DESC;
--
-- -- Monitor stream for new data
-- SELECT * FROM CMDI_TRADES_STREAM;
--
-- -- Check task execution history
-- SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY())
-- WHERE NAME = 'CMDI_LOAD_TRADES_TASK'
-- ORDER BY SCHEDULED_TIME DESC;
-- ============================================================
-- CMD_RAW_001 Schema Setup Complete!
-- ============================================================
